# -*- coding: utf-8 -*-
# !/usr/bin/env python
# visit https://tool.lu/pyc/ for more information
import os
import sys
import time
from ctypes import *
from settings import LIBS_PATH

if sys.platform == 'win32':
    from ctypes import WinDLL
    from ctypes import WINFUNCTYPE

    dll = WinDLL
    winfun_ctype = WINFUNCTYPE
    if sys.version.startswith('2.'):
        reload(sys)
        sys.setdefaultencoding('utf-8')

elif 'linux' in sys.platform:
    from ctypes import cdll
    from ctypes import CFUNCTYPE

    dll = cdll.LoadLibrary
    winfun_ctype = CFUNCTYPE
__version__ = '0.1'
error_code_msg_mapping = {
    0: u'SADP_NOERROR:\xe6\xb2\xa1\xe6\x9c\x89\xe9\x94\x99\xe8\xaf\xaf',
    2001: u'SADP_ALLOC_RESOURCE_ERROR:\xe8\xb5\x84\xe6\xba\x90\xe5\x88\x86\xe9\x85\x8d\xe9\x94\x99\xe8\xaf\xaf',
    2002: u'SADP_NOT_START_ERROR:SADP\xe6\x9c\xaa\xe5\x90\xaf\xe5\x8a\xa8',
    2003: u'SADP_NO_ADAPTER_ERROR:\xe6\x97\xa0\xe7\xbd\x91\xe5\x8d\xa1',
    2004: u'SADP_GET_ADAPTER_FAIL_ERROR:\xe8\x8e\xb7\xe5\x8f\x96\xe7\xbd\x91\xe5\x8d\xa1\xe4\xbf\xa1\xe6\x81\xaf\xe5\xa4\xb1\xe8\xb4\xa5',
    2005: u'SADP_PARAMETER_ERROR',
    2006: u'SADP_OPEN_ADAPTER_FAIL_ERROR:\xe6\x89\x93\xe5\xbc\x80\xe7\xbd\x91\xe5\x8d\xa1\xe5\xa4\xb1\xe8\xb4\xa5',
    2007: u'SADP_SEND_PACKET_FAIL_ERROR:\xe5\x8f\x91\xe9\x80\x81\xe6\x95\xb0\xe6\x8d\xae\xe5\xa4\xb1\xe8\xb4\xa5',
    2008: u'SADP_SYSTEM_CALL_ERROR:\xe7\xb3\xbb\xe7\xbb\x9f\xe6\x8e\xa5\xe5\x8f\xa3\xe8\xb0\x83\xe7\x94\xa8\xe5\xa4\xb1\xe8\xb4\xa5',
    2009: u'SADP_DENY_OR_TIMEOUT_ERROR:\xe8\xae\xbe\xe5\xa4\x87\xe6\x8b\x92\xe7\xbb\x9d\xe5\xa4\x84\xe7\x90\x86\xe6\x88\x96\xe8\xb6\x85\xe6\x97\xb6',
    2010: u'SADP_NPF_INSTALL_FAILED:\xe5\xae\x89\xe8\xa3\x85NPF\xe6\x9c\x8d\xe5\x8a\xa1\xe5\xa4\xb1\xe8\xb4\xa5',
    2011: u'SADP_TIMEOUT:\xe8\xae\xbe\xe5\xa4\x87\xe5\x93\x8d\xe5\xba\x94\xe8\xb6\x85\xe6\x97\xb6',
    2012: u'SADP_CREATE_SOCKET_ERROR:\xe5\x88\x9b\xe5\xbb\xbasocket\xe5\xa4\xb1\xe8\xb4\xa5',
    2013: u'SADP_BIND_SOCKET_ERROR:\xe7\xbb\x91\xe5\xae\x9asocket\xe5\xa4\xb1\xe8\xb4\xa5',
    2014: u'SADP_JOIN_MULTI_CAST_ERROR:\xe5\x8a\xa0\xe5\x85\xa5\xe5\xa4\x9a\xe6\x92\xad\xe7\xbb\x84\xe5\xa4\xb1\xe8\xb4\xa5',
    2015: u'SADP_NETWORK_SEND_ERROR:\xe5\x8f\x91\xe9\x80\x81\xe5\x87\xba\xe9\x94\x99',
    2016: u'SADP_NETWORK_RECV_ERROR:\xe6\x8e\xa5\xe6\x94\xb6\xe5\x87\xba\xe9\x94\x99',
    2017: u'SADP_XML_PARSE_ERROR:\xe5\xa4\x9a\xe6\x92\xadXML\xe8\xa7\xa3\xe6\x9e\x90\xe5\x87\xba\xe9\x94\x99',
    2018: u'SADP_LOCKED:\xe8\xae\xbe\xe5\xa4\x87\xe9\x94\x81\xe5\xae\x9a',
    2019: u'SADP_NOT_ACTIVATED:\xe8\xae\xbe\xe5\xa4\x87\xe6\x9c\xaa\xe6\xbf\x80\xe6\xb4\xbb',
    2020: u'SADP_RISK_PASSWORD:\xe9\xa3\x8e\xe9\x99\xa9\xe9\xab\x98\xe7\x9a\x84\xe5\xaf\x86\xe7\xa0\x81',
    2021: u'SADP_HAS_ACTIVATED:\xe8\xae\xbe\xe5\xa4\x87\xe5\xb7\xb2\xe6\xbf\x80\xe6\xb4\xbb'}


class SADP_DEVICE_INFO(Structure):
    """
    \xe8\xae\xbe\xe5\xa4\x87\xe5\x8f\x82\xe6\x95\xb0\xe7\xbb\x93\xe6\x9e\x84\xe4\xbd\x93\xe3\x80\x82
    typedef struct tagSADP_DEVICE_INFO
    {
        char            szSeries[12];
        char            szSerialNO[48];
        char            szMAC[20];
        char            szIPv4Address[16];
        char            szIPv4SubnetMask[16];
        unsigned int    dwDeviceType;
        unsigned int    dwPort;
        unsigned int    dwNumberOfEncoders;
        unsigned int    dwNumberOfHardDisk;
        char            szDeviceSoftwareVersion[48];
        char            szDSPVersion[48];
        char            szBootTime[48];
        int                iResult;
        char            szDevDesc[24];       //\xe8\xae\xbe\xe5\xa4\x87\xe7\xb1\xbb\xe5\x9e\x8b\xe6\x8f\x8f\xe8\xbf\xb0
        char            szOEMinfo[24];       //OEM\xe4\xba\xa7\xe5\x95\x86\xe4\xbf\xa1\xe6\x81\xaf
        char            szIPv4Gateway[16];   //IPv4\xe7\xbd\x91\xe5\x85\xb3
        char            szIPv6Address[46];     //IPv6\xe5\x9c\xb0\xe5\x9d\x80
        char            szIPv6Gateway[46];   //IPv6\xe7\xbd\x91\xe5\x85\xb3
        unsigned char   byIPv6MaskLen;       //IPv6\xe5\xad\x90\xe7\xbd\x91\xe5\x89\x8d\xe7\xbc\x80\xe9\x95\xbf\xe5\xba\xa6
        unsigned char   bySupport;           //\xe6\x8c\x89\xe4\xbd\x8d\xe8\xa1\xa8\xe7\xa4\xba,\xe5\xaf\xb9\xe5\xba\x94\xe4\xb8\xba\xe4\xb8\xba1\xe8\xa1\xa8\xe7\xa4\xba\xe6\x94\xaf\xe6\x8c\x81,0x01:\xe6\x98\xaf\xe5\x90\xa6\xe6\x94\xaf\xe6\x8c\x81Ipv6,0x02:\xe6\x98\xaf\xe5\x90\xa6\xe6\x94\xaf\xe6\x8c\x81\xe4\xbf\xae\xe6\x94\xb9Ipv6\xe5\x8f\x82\xe6\x95\xb0,0x04:\xe6\x98\xaf\xe5\x90\xa6\xe6\x94\xaf\xe6\x8c\x81Dhcp
        unsigned char   byDhcpEnabled;       //Dhcp\xe7\x8a\xb6\xe6\x80\x81, 0 \xe4\xb8\x8d\xe5\x90\xaf\xe7\x94\xa8 1 \xe5\x90\xaf\xe7\x94\xa8
        unsigned char   byDeviceAbility;    //0\xef\xbc\x9a\xe8\xae\xbe\xe5\xa4\x87\xe4\xb8\x8d\xe6\x94\xaf\xe6\x8c\x81\xe2\x80\x9c\xe2\x80\x98\xe8\xae\xbe\xe5\xa4\x87\xe7\xb1\xbb\xe5\x9e\x8b\xe6\x8f\x8f\xe8\xbf\xb0\xe2\x80\x99 'OEM\xe5\x8e\x82\xe5\x95\x86' 'IPv4\xe7\xbd\x91\xe5\x85\xb3' \xe2\x80\x98IPv6\xe5\x9c\xb0\xe5\x9d\x80\xe2\x80\x99 'IPv6\xe7\xbd\x91\xe5\x85\xb3' \xe2\x80\x98IPv6\xe5\xad\x90\xe7\xbd\x91\xe5\x89\x8d\xe7\xbc\x80\xe2\x80\x99\xe2\x80\x98DHCP\xe2\x80\x99\xe2\x80\x9d  1\xef\xbc\x9a\xe6\x94\xaf\xe6\x8c\x81\xe4\xb8\x8a\xe8\xaf\x89\xe5\x8a\x9f\xe8\x83\xbd
        unsigned short    wHttpPort;            // Http \xe7\xab\xaf\xe5\x8f\xa3
        unsigned char   byActivated; //\xe8\xae\xbe\xe5\xa4\x87\xe6\x98\xaf\xe5\x90\xa6\xe6\xbf\x80\xe6\xb4\xbb;0-\xe6\xbf\x80\xe6\xb4\xbb\xef\xbc\x8c1-\xe6\x9c\xaa\xe6\xbf\x80\xe6\xb4\xbb\xef\xbc\x88\xe8\x80\x81\xe7\x9a\x84\xe8\xae\xbe\xe5\xa4\x87\xe9\x83\xbd\xe6\x98\xaf\xe5\xb7\xb2\xe6\xbf\x80\xe6\xb4\xbb\xe7\x8a\xb6\xe6\x80\x81\xef\xbc\x89
        unsigned short    wDigitalChannelNum;
        char            szCmsIPv4[16];
        unsigned short    wCmsPort;
        unsigned char    byOEMCode;  //0-\xe5\x9f\xba\xe7\xba\xbf\xe8\xae\xbe\xe5\xa4\x87 1-OEM\xe8\xae\xbe\xe5\xa4\x87
        unsigned char   byRes[41];
    }SADP_DEVICE_INFO, *LPSADP_DEVICE_INFO;
    """
    _fields_ = [
        ('szSeries', c_char * 12),
        ('szSerialNO', c_char * 48),
        ('szMAC', c_char * 20),
        ('szIPv4Address', c_char * 16),
        ('szIPv4SubnetMask', c_char * 16),
        ('dwDeviceType', c_uint),
        ('dwPort', c_uint),
        ('dwNumberOfEncoders', c_uint),
        ('dwNumberOfHardDisk', c_uint),
        ('szDeviceSoftwareVersion', c_char * 48),
        ('szDSPVersion', c_char * 48),
        ('szBootTime', c_char * 48),
        ('iResult', c_int),
        ('szDevDesc', c_char * 24),
        ('szOEMinfo', c_char * 24),
        ('szIPv4Gateway', c_char * 16),
        ('szIPv6Address', c_char * 46),
        ('szIPv6Gateway', c_char * 46),
        ('byIPv6MaskLen', c_ubyte),
        ('bySupport', c_ubyte),
        ('byDhcpEnabled', c_ubyte),
        ('byDeviceAbility', c_ubyte),
        ('wHttpPort', c_ushort),
        ('wDigitalChannelNum', c_ushort),
        ('szCmsIPv4', c_char * 16),
        ('wCmsPort', c_ushort),
        ('byOEMCode', c_ubyte),
        ('byActivated', c_ubyte),
        ('szBaseDesc', c_char * 24),
        ('byRes', c_ubyte * 16)]


class SADP_DEV_NET_PARAM(Structure):
    '''
    \xe8\xae\xbe\xe5\xa4\x87\xe7\xbd\x91\xe7\xbb\x9c\xe5\x8f\x82\xe6\x95\xb0\xe7\xbb\x93\xe6\x9e\x84\xe4\xbd\x93.
    typedef struct tagSADP_DEV_NET_PARAM
    {
        char            szIPv4Address[16];        // IPv4\xe5\x9c\xb0\xe5\x9d\x80
        char            szIPv4SubNetMask[16];    // IPv4\xe5\xad\x90\xe7\xbd\x91\xe6\x8e\xa9\xe7\xa0\x81
        char            szIPv4Gateway[16];        // IPv4\xe7\xbd\x91\xe5\x85\xb3
        char            szIPv6Address[128];        // IPv6\xe5\x9c\xb0\xe5\x9d\x80
        char            szIPv6Gateway[128];        // IPv6\xe7\xbd\x91\xe5\x85\xb3
        unsigned short    wPort;                    // \xe8\xae\xbe\xe5\xa4\x87\xe7\x9b\x91\xe5\x90\xac\xe7\xab\xaf\xe5\x8f\xa3
        unsigned char    byIPv6MaskLen;            // IPv6\xe6\x8e\xa9\xe7\xa0\x81\xe9\x95\xbf\xe5\xba\xa6
        unsigned char    byDhcpEnable;            // DHCP\xe4\xbd\xbf\xe8\x83\xbd
        unsigned short    wHttpPort;                //HTTP\xe7\xab\xaf\xe5\x8f\xa3
        unsigned char    byRes[126];
    }SADP_DEV_NET_PARAM, *LPSADP_DEV_NET_PARAM;
    '''
    _fields_ = [
        ('szIPv4Address', c_char * 16),
        ('szIPv4SubNetMask', c_char * 16),
        ('szIPv4Gateway', c_char * 16),
        ('szIPv6Address', c_char * 128),
        ('szIPv6Gateway', c_char * 128),
        ('wPort', c_ushort),
        ('byIPv6MaskLen', c_ubyte),
        ('byDhcpEnable', c_ubyte),
        ('wHttpPort', c_ushort),
        ('byRes', c_ubyte * 126)]


class SADP_CMS_PARAM(Structure):
    '''
    \xe8\xae\xbe\xe5\xa4\x87CMS\xe5\x8f\x82\xe6\x95\xb0\xe7\xbb\x93\xe6\x9e\x84\xe4\xbd\x93.
    typedef struct tagSADP_CMS_PARAM
    {
        char                szPUID[32];
        char                szPassword[16];
        char                szCmsIPv4[16];
        char                szCmsIPv6[128];
        unsigned short    wCmsPort;
        unsigned char       byRes[30];
    }SADP_CMS_PARAM, *LPSADP_CMS_PARAM;
    '''
    _fields_ = [
        ('szPUID', c_char * 32),
        ('szPassword', c_char * 16),
        ('szCmsIPv4', c_char * 16),
        ('szCmsIPv6', c_char * 128),
        ('wCmsPort', c_ushort),
        ('byRes', c_ubyte * 30)]


def get_sadplib():
    if sys.platform == 'win32':

        try:
            sadpsdk_path = os.path.join(LIBS_PATH, 'Sadp.dll')
            if os.path.exists(sadpsdk_path):
                sadplib = dll(sadpsdk_path)
            else:
                sadplib = dll('Sadp.dll')
        except WindowsError:
            raise Exception('Unable to load the Sadp.dll component from windows')
    return sadplib


class Sadp(object):
    '''
    SADP\xe5\xba\x93:\xe9\x80\x9a\xe8\xbf\x87SDAP\xe5\x8d\x8f\xe8\xae\xae\xe8\x8e\xb7\xe5\x8f\x96\xe8\xae\xbe\xe5\xa4\x87\xe5\x9c\xa8\xe7\xba\xbf\xe4\xbf\xa1\xe6\x81\xaf
    '''
    ROBOT_LIBRARY_SCOPE = 'TEST SUITE'

    def __init__(self):
        self.online_devices_info = {}
        self._sadplib = get_sadplib()

        try:
            DEVICEFINDCALLBACK = winfun_ctype(c_int, POINTER(SADP_DEVICE_INFO), c_void_p)
        except WindowsError:
            raise Exception('Unable to load the Sadp.dll component from windows')

        def py_device_find_callback_func(lpDeviceInfo, pUserData):
            '''
            \xe8\xae\xbe\xe5\xa4\x87\xe6\x9f\xa5\xe6\x89\xbe\xe5\x9b\x9e\xe8\xb0\x83\xe5\x87\xbd\xe6\x95\xb0\xe3\x80\x82
            '''
            sadp = {}
            sadp['IP'] = lpDeviceInfo[0].szIPv4Address
            sadp['MAC'] = lpDeviceInfo[0].szMAC
            sadp['SubNetMask'] = lpDeviceInfo[0].szIPv4SubnetMask
            sadp['GateWay'] = lpDeviceInfo[0].szIPv4Gateway
            sadp['SerialNO'] = lpDeviceInfo[0].szSerialNO
            sadp['BootTime'] = lpDeviceInfo[0].szBootTime
            sadp['Port'] = lpDeviceInfo[0].dwPort
            sadp['SoftwareVersion'] = lpDeviceInfo[0].szDeviceSoftwareVersion
            sadp['IP6'] = lpDeviceInfo[0].szIPv6Address
            sadp['IP6GateWay'] = lpDeviceInfo[0].szIPv6Gateway
            sadp['IP6MaskLen'] = lpDeviceInfo[0].byIPv6MaskLen
            sadp['HttpPort'] = lpDeviceInfo[0].wHttpPort
            sadp['DhcpEnable'] = lpDeviceInfo[0].byDhcpEnabled
            sadp['DSPVersion'] = lpDeviceInfo[0].szDSPVersion
            sadp['DeviceType'] = lpDeviceInfo[0].szDevDesc
            sadp['Activated'] = lpDeviceInfo[0].byActivated
            sadp['DigitalChannelNum'] = lpDeviceInfo[0].wDigitalChannelNum
            sadp['NumberOfEncoders'] = lpDeviceInfo[0].dwNumberOfEncoders
            self.online_devices_info['%s' % lpDeviceInfo[0].szMAC] = sadp
            return len(self.online_devices_info)

        self.device_find_callback = DEVICEFINDCALLBACK(py_device_find_callback_func)

    def get_ridecase_examples(self):
        '''
        SADP\xe5\xba\x93
        \xe4\xb8\x80\xe8\x88\xac\xe6\xb5\x81\xe7\xa8\x8b\xe5\xa6\x82\xe4\xb8\x8b\xef\xbc\x9a
        1. \xe5\xbc\x80\xe5\x90\xafSADP\xe6\x9c\x8d\xe5\x8a\xa1
        2.\xe4\xbd\xbf\xe7\x94\xa8SADP\xe7\x9a\x84\xe5\x85\xb6\xe4\xbb\x96\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97
        3.\xe5\x81\x9c\xe6\xad\xa2SDAP\xe6\x9c\x8d\xe5\x8a\xa1

        SADP\xe5\xba\x93\xe4\xbd\xbf\xe7\x94\xa8\xe6\xb5\x81\xe7\xa8\x8b\xe5\xa6\x82\xe4\xb8\x8b\xef\xbc\x9a
        | #\xe5\x90\xaf\xe5\x8a\xa8SADP | | |
        | sadp start | |   |
        | #\xe8\x8e\xb7\xe5\x8f\x96\xe6\x89\x80\xe6\x9c\x89\xe5\x9c\xa8\xe7\xba\xbf\xe8\xae\xbe\xe5\xa4\x87\xe7\x9a\x84IPV4\xe5\x9c\xb0\xe5\x9d\x80 | | |
        | ${devices} | sadp get online devices | 3 |
        | #\xe5\x81\x9c\xe6\xad\xa2SADP\xe6\x9c\x8d\xe5\x8a\xa1 | | |
        | sadp stop | | |
        '''
        pass

    def sadp_start(self):
        '''
        \xe5\x90\xaf\xe5\x8a\xa8SADP\xe3\x80\x82
        '''
        self.online_devices_info = {}
        if self._sadplib.SADP_Start_V30(self.device_find_callback, 1, 0):
            return True
        raise None('SADP lib: SADP Start Failed with Error: ' + self._get_last_error_msg())

    def sadp_stop(self):
        '''
        \xe5\x81\x9c\xe6\xad\xa2SADP\xe3\x80\x82
        '''
        if self._sadplib.SADP_Stop():
            return True
        raise None('SADP lib: SADP Stop Failed with Error: ' + self._get_last_error_msg())

    def sadp_get_sadp_version(self):
        '''
        \xe8\x8e\xb7\xe5\x8f\x96sadp\xe5\xba\x93\xe7\x9a\x84\xe7\x89\x88\xe6\x9c\xac\xe5\x8f\xb7
        \xe8\xbf\x94\xe5\x9b\x9e\xe5\x80\xbc\xef\xbc\x9a\xe7\x89\x88\xe6\x9c\xac\xe5\x8f\xb7\xef\xbc\x8c\xe6\xa0\xbc\xe5\xbc\x8f\xe4\xb8\xbaV3.1.1.3\xe3\x80\x82
        '''
        sdk_version = self._sadplib.SADP_GetSadpVersion()
        return 'V%s.%s.%s.%s' % (
        sdk_version >> 24 & 15, sdk_version >> 16 & 15, sdk_version >> 8 & 15, sdk_version >> 0 & 15)

    def sadp_get_online_devices(self, delay=3):
        '''
        \xe8\x8e\xb7\xe5\x8f\x96\xe6\x89\x80\xe6\x9c\x89\xe5\x9c\xa8\xe7\xba\xbf\xe8\xae\xbe\xe5\xa4\x87\xe7\x9a\x84IPV4\xe3\x80\x82(\xe9\x9c\x80\xe5\x85\x88\xe7\x94\xa8SADP start\xe6\x9d\xa5\xe5\x90\xaf\xe5\x8a\xa8SADP)
        \xe5\x8f\x82\xe6\x95\xb0:
            delay:\xe7\xad\x89\xe5\xbe\x85\xe6\x89\x80\xe6\x9c\x89\xe8\xae\xbe\xe5\xa4\x87\xe4\xb8\x8a\xe7\xba\xbf\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe4\xb8\xba3\xe7\xa7\x92\xe3\x80\x82
        \xe8\xb0\x83\xe7\x94\xa8\xe6\xad\xa5\xe9\xaa\xa4\xef\xbc\x9a
        | sadp start |                         |   |
        | ${devices} | sadp get online devices | 3 |
        | sadp stop  |
        \xe5\xa4\x87\xe6\xb3\xa8\xef\xbc\x9a\xe9\x87\x87\xe7\x94\xa8\xe4\xba\x86\xe4\xbb\xa5MAC\xe5\x9c\xb0\xe5\x9d\x80\xe4\xbd\x9c\xe4\xb8\xba\xe8\xaf\x86\xe5\x88\xab\xe8\xae\xbe\xe5\xa4\x87\xe5\x94\xaf\xe4\xb8\x80\xe6\x80\xa7\xe7\x9a\x84\xe6\xa0\x87\xe5\xbf\x97
        '''
        time.sleep(int(delay))
        ip_list = []
        for key in self.online_devices_info.keys():
            ip_list.append(self.online_devices_info[key]['IP'])

        return ip_list

    def sadp_get_online_devices_serialno(self, delay=1):
        '''
        \xe8\x8e\xb7\xe5\x8f\x96\xe6\x89\x80\xe6\x9c\x89\xe5\x9c\xa8\xe7\xba\xbf\xe8\xae\xbe\xe5\xa4\x87\xe7\x9a\x84IPV4\xe3\x80\x82(\xe9\x9c\x80\xe5\x85\x88\xe7\x94\xa8SADP start\xe6\x9d\xa5\xe5\x90\xaf\xe5\x8a\xa8SADP)
        \xe5\x8f\x82\xe6\x95\xb0:
            delay:\xe7\xad\x89\xe5\xbe\x85\xe6\x89\x80\xe6\x9c\x89\xe8\xae\xbe\xe5\xa4\x87\xe4\xb8\x8a\xe7\xba\xbf\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe4\xb8\xba3\xe7\xa7\x92\xe3\x80\x82
        \xe8\xb0\x83\xe7\x94\xa8\xe6\xad\xa5\xe9\xaa\xa4\xef\xbc\x9a
        | sadp start |                         |   |
        | ${devices} | sadp get online devices | 3 |
        | sadp stop  |
        \xe5\xa4\x87\xe6\xb3\xa8\xef\xbc\x9a\xe9\x87\x87\xe7\x94\xa8\xe4\xba\x86\xe4\xbb\xa5MAC\xe5\x9c\xb0\xe5\x9d\x80\xe4\xbd\x9c\xe4\xb8\xba\xe8\xaf\x86\xe5\x88\xab\xe8\xae\xbe\xe5\xa4\x87\xe5\x94\xaf\xe4\xb8\x80\xe6\x80\xa7\xe7\x9a\x84\xe6\xa0\x87\xe5\xbf\x97
        '''
        time.sleep(int(delay))
        ip_list = []
        for key in self.online_devices_info.keys():
            ip_list.append(self.online_devices_info[key]['SerialNO'])

        return ip_list


    def sadp_get_online_devices_info(self, condition=None, condition_value=None, delay=2):
        '''
        \xe4\xbb\x8eSADP\xe6\x9f\xa5\xe6\x89\xbe\xe5\x9c\xa8\xe7\xba\xbf\xe8\xae\xbe\xe5\xa4\x87\xe8\xaf\xa6\xe7\xbb\x86\xe4\xbf\xa1\xe6\x81\xaf,\xe5\xbf\x85\xe9\x9c\x80\xe5\x85\x88\xe7\x94\xa8SADP start\xe6\x9d\xa5\xe5\x90\xaf\xe5\x8a\xa8SADP
        \xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9a
            condition\xef\xbc\x9a\xe6\x9f\xa5\xe6\x89\xbe\xe6\x9d\xa1\xe4\xbb\xb6\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe4\xb8\xbaNone\xef\xbc\x8c\xe4\xb8\xbaNone\xe7\x9a\x84\xe6\x97\xb6\xe5\x80\x99condition_value\xe4\xb9\x9f\xe5\xbf\x85\xe9\xa1\xbb\xe4\xb8\xbaNone\xef\xbc\x8cNone\xe4\xbb\xa3\xe8\xa1\xa8\xe6\x9f\xa5\xe6\x89\xbe\xe5\x85\xa8\xe9\x83\xa8\xe5\x9c\xa8\xe7\xba\xbf\xe8\xae\xbe\xe5\xa4\x87\xe7\x9a\x84\xe8\xaf\xa6\xe7\xbb\x86\xe4\xbf\xa1\xe6\x81\xaf
            \xe5\xbd\x93\xe6\x9f\xa5\xe8\xaf\xa2\xe6\x9d\xa1\xe4\xbb\xb6\xe4\xb8\xbaNone\xe6\x97\xb6\xef\xbc\x9a
        \xe8\xbf\x94\xe5\x9b\x9e\xe5\x80\xbc\xef\xbc\x9a
            \xe4\xb8\x80\xe4\xb8\xaa\xe4\xbb\xa5\xe8\xae\xbe\xe5\xa4\x87mac\xe4\xb8\xba\xe9\x94\xae\xef\xbc\x8c\xe4\xbb\xa5\xe8\xae\xbe\xe5\xa4\x87\xe4\xbf\xa1\xe6\x81\xaf\xe5\xad\x97\xe5\x85\xb8\xe4\xb8\xba\xe5\x80\xbc\xe7\x9a\x84\xe4\xb8\x80\xe4\xb8\xaa\xe5\xa4\xa7\xe5\xad\x97\xe5\x85\xb8\xef\xbc\x8c\xe5\xbd\xa2\xe5\xa6\x82\xef\xbc\x9a{MAC1:{\xe8\xae\xbe\xe5\xa4\x871\xe4\xbf\xa1\xe6\x81\xaf\xe5\xad\x97\xe5\x85\xb8}\xef\xbc\x8cMAC2:{\xe8\xae\xbe\xe5\xa4\x872\xe4\xbf\xa1\xe6\x81\xaf\xe5\xad\x97\xe5\x85\xb8},...}

            \xe5\xbd\x93\xe6\x9f\xa5\xe8\xaf\xa2\xe6\x9d\xa1\xe4\xbb\xb6\xe4\xb8\x8d\xe4\xb8\xbaNone\xe6\x97\xb6\xef\xbc\x9a
            \xe6\x94\xaf\xe6\x8c\x81\xe5\xa6\x82\xe4\xb8\x8b\xe6\x9f\xa5\xe6\x89\xbe\xe6\x9d\xa1\xe4\xbb\xb6\xef\xbc\x9a
                1. SubNetMask\xef\xbc\x9a\xe5\xad\x90\xe7\xbd\x91\xe6\x8e\xa9\xe7\xa0\x81
                2. MAC\xef\xbc\x9a\xe7\x89\xa9\xe7\x90\x86\xe5\x9c\xb0\xe5\x9d\x80
                3. GateWay\xef\xbc\x9a\xe7\xbd\x91\xe5\x85\xb3
                4. SerialNO\xef\xbc\x9a\xe8\xae\xbe\xe5\xa4\x87\xe5\xba\x8f\xe5\x88\x97\xe5\x8f\xb7
                5. IP: IP\xe5\x9c\xb0\xe5\x9d\x80
            condition_value\xef\xbc\x9a\xe6\x9f\xa5\xe6\x89\xbe\xe6\x9d\xa1\xe4\xbb\xb6condition\xe7\x9a\x84\xe5\x80\xbc
            delay\xef\xbc\x9a \xe5\xbb\xb6\xe6\x97\xb6\xe7\xad\x89\xe5\xbe\x85\xe8\x8e\xb7\xe5\x8f\x96\xe8\xae\xbe\xe5\xa4\x87\xe5\x88\x97\xe8\xa1\xa8\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe4\xb8\xba3\xe7\xa7\x92(\xe8\x8b\xa5\xe8\x8e\xb7\xe5\x8f\x96\xe4\xb8\x8d\xe5\x88\xb0\xe5\x88\x99\xe5\x86\x8d\xe5\xbb\xb6\xe8\xbf\x9fdelay\xe7\xa7\x92,\xe6\x9f\xa5\xe8\xaf\xa23\xe6\xac\xa1\xe7\x9b\xb4\xe5\x88\xb0\xe8\x8e\xb7\xe5\x8f\x96\xe5\x88\xb0\xe8\xae\xbe\xe5\xa4\x87\xe5\x88\x97\xe8\xa1\xa8,\xe8\x8b\xa53\xe6\xac\xa1\xe8\x8e\xb7\xe5\x8f\x96\xe4\xb8\x8d\xe5\x88\xb0\xe8\xae\xa4\xe4\xb8\xba\xe8\xae\xbe\xe5\xa4\x87\xe4\xb8\x8d\xe5\x9c\xa8\xe7\xba\xbf)
        \xe8\xbf\x94\xe5\x9b\x9e\xe5\x80\xbc\xef\xbc\x9a
            \xe7\xac\xa6\xe5\x90\x88\xe6\x9d\xa1\xe4\xbb\xb6\xe7\x9a\x84\xe8\xae\xbe\xe5\xa4\x87\xe4\xbf\xa1\xe6\x81\xaf\xe5\x88\x97\xe8\xa1\xa8\xef\xbc\x8c\xe5\xbd\xa2\xe5\xa6\x82:[{\xe8\xae\xbe\xe5\xa4\x871\xe4\xbf\xa1\xe6\x81\xaf\xe5\xad\x97\xe5\x85\xb8},{\xe8\xae\xbe\xe5\xa4\x872\xe4\xbf\xa1\xe6\x81\xaf\xe5\xad\x97\xe5\x85\xb8},...]
            \xe5\x88\x97\xe8\xa1\xa8\xe5\x86\x85\xe5\xad\x97\xe5\x85\xb8\xe9\x94\xae\xe5\x80\xbc\xe5\x8c\x85\xe6\x8b\xac\xef\xbc\x9a
                IP:IPV4
                MAC\xef\xbc\x9a\xe7\x89\xa9\xe7\x90\x86\xe5\x9c\xb0\xe5\x9d\x80
                SubNetMask\xef\xbc\x9a\xe5\xad\x90\xe7\xbd\x91\xe6\x8e\xa9\xe7\xa0\x81
                GateWay\xef\xbc\x9a\xe7\xbd\x91\xe5\x85\xb3
                SerialNO\xef\xbc\x9a\xe8\xae\xbe\xe5\xa4\x87\xe5\xba\x8f\xe5\x88\x97\xe5\x8f\xb7
                BootTime\xef\xbc\x9a\xe8\xae\xbe\xe5\xa4\x87\xe5\x90\xaf\xe5\x8a\xa8\xe6\x97\xb6\xe9\x97\xb4
                Port:\xe7\xab\xaf\xe5\x8f\xa3\xe5\x8f\xb7
                SoftwareVersion\xef\xbc\x9a\xe8\xbd\xaf\xe4\xbb\xb6\xe7\x89\x88\xe6\x9c\xac
                DSPVersion:DSP\xe7\x89\x88\xe6\x9c\xac
                IP6\xef\xbc\x9aIPV6
                IP6GateWay\xef\xbc\x9aIPV6\xe7\xbd\x91\xe5\x85\xb3
                IP6MaskLen\xef\xbc\x9aIPv6\xe5\xad\x90\xe7\xbd\x91\xe5\x89\x8d\xe7\xbc\x80\xe9\x95\xbf\xe5\xba\xa6
                HttpPort\xef\xbc\x9aHttp \xe7\xab\xaf\xe5\x8f\xa3
                DhcpEnable\xef\xbc\x9aDhcp\xe7\x8a\xb6\xe6\x80\x81, 0 \xe4\xb8\x8d\xe5\x90\xaf\xe7\x94\xa8 1 \xe5\x90\xaf\xe7\x94\xa8
                Activated\xef\xbc\x9a \xe8\xae\xbe\xe5\xa4\x87\xe6\x98\xaf\xe5\x90\xa6\xe6\xbf\x80\xe6\xb4\xbb;0-\xe6\xbf\x80\xe6\xb4\xbb\xef\xbc\x8c1-\xe6\x9c\xaa\xe6\xbf\x80\xe6\xb4\xbb\xef\xbc\x88\xe8\x80\x81\xe7\x9a\x84\xe8\xae\xbe\xe5\xa4\x87\xe9\x83\xbd\xe6\x98\xaf\xe5\xb7\xb2\xe6\xbf\x80\xe6\xb4\xbb\xe7\x8a\xb6\xe6\x80\x81\xef\xbc\x89
        \xe5\xa4\x87\xe6\xb3\xa8\xef\xbc\x9a
            | SADP start                     |
            | # 1.\xe6\x9f\xa5\xe6\x89\xbe\xe5\x85\xa8\xe9\x83\xa8\xe5\x9c\xa8\xe7\xba\xbf\xe7\x9a\x84\xe8\xae\xbe\xe5\xa4\x87\xe8\xaf\xa6\xe7\xbb\x86\xe4\xbf\xa1\xe6\x81\xaf        |
            | SADP Get Online Devices Info   |
            | # 2.\xe6\x9f\xa5\xe6\x89\xbe\xe5\xba\x8f\xe5\x88\x97\xe5\x8f\xb7\xe4\xb8\xbaDS-2CD4032FWD20130424CCCH417544771\xe7\x9a\x84\xe8\xae\xbe\xe5\xa4\x87\xe4\xbf\xa1\xe6\x81\xaf |
            | SADP Get Online Devices Info | SerialNO | DS-2CD4032FWD20130424CCCH417544771 | 3 |
            | # 3. \xe6\x9f\xa5\xe6\x89\xbeMAX\xe5\x9c\xb0\xe5\x9d\x80\xe4\xb8\xba44-19-b7-1f-e4-4d\xe7\x9a\x84\xe8\xae\xbe\xe5\xa4\x87\xe4\xbf\xa1\xe6\x81\xaf |
            | SADP Get Online Devices Info | MAC | 44-19-b7-1f-e4-4d | 3 |
            | # \xe5\x81\x9c\xe6\xad\xa2SADP |
            | SADP stop |
        '''
        time.sleep(int(delay))
        if condition == 'None' or condition_value == 'None':
            condition = None
            condition_value = None
        for index in xrange(3):
            devices_info = self.online_devices_info
            devices_list = self._sadp_get_online_devices_info(condition, condition_value, devices_info)
            if len(devices_list) == 0:
                time.sleep(int(delay))
                print 'Have not find devices by %s=%s, finding the %sth!' % (condition, condition_value, index + 1)
                devices_list = self._sadp_get_online_devices_info(condition, condition_value, devices_info)
                continue
            # print 'Find %s=%s success!' % (condition, condition_value)
            break

        if len(devices_list) == 0:
            print u'*WARN* Can not find any devices by %s=%s for 3 times, device maybe offline!' % (
            condition, condition_value)
        return devices_list

    def sadp_modify_device_net_parameters(self, condition='ip', condition_value='', Password='12345', *string_para_set,
                                          **keyword_para_set):
        """
        \xe4\xbf\xae\xe6\x94\xb9\xe8\xae\xbe\xe5\xa4\x87\xe7\xbd\x91\xe7\xbb\x9c\xe5\x8f\x82\xe6\x95\xb0,\xe5\xa6\x82\xe6\x9e\x9cSADP\xe6\x9f\xa5\xe6\x89\xbe\xe5\x88\xb0\xe7\xac\xa6\xe5\x90\x88\xe6\x9d\xa1\xe4\xbb\xb6\xe7\x9a\x84\xe8\xae\xbe\xe5\xa4\x87\xe5\xa4\xa7\xe4\xba\x8e1\xe4\xb8\xaa\xe5\x88\x99\xe6\x8a\x9b\xe5\x87\xba\xe5\xbc\x82\xe5\xb8\xb8\xef\xbc\x8c(\xe8\x8b\xa5\xe6\x9f\xa5\xe8\xaf\xa2\xe4\xb8\x8d\xe5\x88\xb0\xe8\xae\xbe\xe5\xa4\x87\xe5\x8f\xaf\xe5\xa4\x9asleep\xe5\x87\xa0\xe7\xa7\x92,\xe6\x88\x96\xe8\x80\x85\xe8\xb0\x83\xe7\x94\xa8sadp_send_inquiry\xe4\xbb\xa5\xe5\x8f\x8asadp_clearup\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe8\xa7\xa3\xe5\x86\xb3)
        \xe5\x8f\x82  \xe6\x95\xb0\xef\xbc\x9a
            condition: \xe9\x9c\x80\xe8\xa6\x81\xe4\xbf\xae\xe6\x94\xb9\xe7\x9a\x84\xe8\xae\xbe\xe5\xa4\x87\xe7\x9a\x84\xe6\x9d\xa1\xe4\xbb\xb6\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe4\xb8\xbabefore_ip\xef\xbc\x8c\xe6\x8c\x89\xe7\x85\xa7\xe6\xad\xa4\xe6\x9d\xa1\xe4\xbb\xb6\xe6\x9d\xa5\xe5\xae\x9a\xe4\xbd\x8d\xe9\x9c\x80\xe8\xa6\x81\xe4\xbf\xae\xe6\x94\xb9\xe7\x9a\x84\xe8\xae\xbe\xe5\xa4\x87\xef\xbc\x8c\xe6\x94\xaf\xe6\x8c\x81\xe4\xbb\xa5\xe4\xb8\x8b\xe4\xb8\x89\xe7\xa7\x8d\xef\xbc\x9a
                1) IP \xe4\xbb\xa5IP\xe5\xae\x9a\xe4\xbd\x8d\xe8\xae\xbe\xe5\xa4\x87\xef\xbc\x8c\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84condition_value\xe5\x8f\xaf\xe5\xa1\xab\xe5\x86\x99\xe5\xa6\x82\xef\xbc\x9a172.10.2.2
                2) SerialNo \xe4\xbb\xa5\xe5\xba\x8f\xe5\x88\x97\xe5\x8f\xb7\xe5\xae\x9a\xe4\xbd\x8d\xe8\xae\xbe\xe5\xa4\x87\xef\xbc\x8c\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84condition_value\xe5\x8f\xaf\xe5\xa1\xab\xe5\x86\x99\xe5\xa6\x82\xef\xbc\x9aDS-2CD855F-E0120121018CCRR408735609
                3) MAC \xe4\xbb\xa5\xe7\x89\xa9\xe7\x90\x86\xe5\x9c\xb0\xe5\x9d\x80\xe5\xae\x9a\xe4\xbd\x8d\xe8\xae\xbe\xe5\xa4\x87\xef\xbc\x8c\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84condition_value\xe5\x8f\xaf\xe5\xa1\xab\xe5\x86\x99\xe5\xa6\x82\xef\xbc\x9a8c-e7-48-f1-d3-fa
            condition_value\xef\xbc\x9a\xe6\x9d\xa1\xe4\xbb\xb6\xe7\x9a\x84\xe5\x80\xbc
            Password\xef\xbc\x9a\xe8\xae\xbe\xe5\xa4\x87admin\xe7\x94\xa8\xe6\x88\xb7\xe7\x9a\x84\xe5\xaf\x86\xe7\xa0\x81\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa412345
            string_para_set: \xe4\xbb\xa5'\xe5\x8f\x82\xe6\x95\xb0=\xe5\x80\xbc'\xe7\x9a\x84\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xef\xbc\x880\xe4\xb8\xaa\xe6\x88\x96\xe5\xa4\x9a\xe4\xb8\xaa\xef\xbc\x89\xe4\xbc\xa0\xe5\x85\xa5\xe5\xbe\x85\xe8\xae\xbe\xe7\xbd\xae\xe5\x8f\x82\xe6\x95\xb0\xe5\x8f\x8a\xe5\x85\xb6\xe5\x8f\x82\xe6\x95\xb0\xe5\x80\xbc
            keyword_para_set: \xe4\xbb\xa5\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0(0\xe4\xb8\xaa\xe6\x88\x96\xe5\xa4\x9a\xe4\xb8\xaa\xef\xbc\x89\xe4\xbc\xa0\xe5\x85\xa5\xe5\xbe\x85\xe8\xae\xbe\xe7\xbd\xae\xe5\x8f\x82\xe6\x95\xb0\xe5\x8f\x8a\xe5\x85\xb6\xe5\x8f\x82\xe6\x95\xb0\xe5\x80\xbc
        \xe8\xbf\x94\xe5\x9b\x9e\xe5\x80\xbc\xef\xbc\x9a \xe4\xbf\xae\xe6\x94\xb9\xe6\x88\x90\xe5\x8a\x9f\xe8\xbf\x94\xe5\x9b\x9eTrue\xef\xbc\x8c\xe5\xa4\xb1\xe8\xb4\xa5\xe6\x8a\x9b\xe5\xbc\x82\xe5\xb8\xb8
        \xe5\xa4\x87\xe6\xb3\xa8\xef\xbc\x9a\xe7\x9b\xae\xe5\x89\x8d\xe6\x94\xaf\xe6\x8c\x81\xe4\xbf\xae\xe6\x94\xb9\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0\xe5\xa6\x82\xe4\xb8\x8b\xef\xbc\x9a
            IP: \xe5\xb0\x86\xe5\x8e\x9fIP\xe4\xbf\xae\xe6\x94\xb9\xe6\x88\x90\xe6\xad\xa4IP
            Port:\xe7\xab\xaf\xe5\x8f\xa3\xe5\x8f\xb7\xe4\xbf\xae\xe6\x94\xb9
            SubNetMask\xef\xbc\x9a\xe5\xad\x90\xe7\xbd\x91\xe6\x8e\xa9\xe7\xa0\x81\xe4\xbf\xae\xe6\x94\xb9\xef\xbc\x88IP4\xef\xbc\x89
            GateWay\xef\xbc\x9a\xe7\xbd\x91\xe5\x85\xb3\xe4\xbf\xae\xe6\x94\xb9\xef\xbc\x88IP4\xef\xbc\x89
            IP6\xef\xbc\x9aIPV6
            IP6GateWay\xef\xbc\x9aIPV6\xe7\xbd\x91\xe5\x85\xb3
            HttpPort\xef\xbc\x9aHttp \xe7\xab\xaf\xe5\x8f\xa3
            DhcpEnable: Dhcp\xe7\x8a\xb6\xe6\x80\x81, 0 \xe4\xb8\x8d\xe5\x90\xaf\xe7\x94\xa8 1 \xe5\x90\xaf\xe7\x94\xa8
        SADP \xe4\xb8\xbb\xe8\xa6\x81\xe6\xb5\x81\xe7\xa8\x8b\xe4\xb8\xba\xef\xbc\x9a
        | SADP Start     |
        | SADP\xe7\x9a\x84\xe5\x85\xb6\xe4\xbb\x96\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97   |                  |               |
        | SADP Stop      |
        eg.\xe4\xb8\x80\xe4\xba\x9b\xe4\xbe\x8b\xe5\xad\x90
        1.\xe4\xbf\xae\xe6\x94\xb9IP\xef\xbc\x9a172.10.2.71\xe7\x9a\x84IP\xe4\xb8\xba192.168.0.1
        | sadp_modify_device_net_parameters | IP | 172.10.2.71 | 12345 | IP=192.168.0.1 |
        2.\xe4\xbf\xae\xe6\x94\xb9\xe6\x8c\x87\xe5\xae\x9a\xe5\xba\x8f\xe5\x88\x97\xe5\x8f\xb7\xe8\xae\xbe\xe5\xa4\x87\xe7\x9a\x84\xe7\xab\xaf\xe5\x8f\xa3\xe5\x8f\xb7\xe4\xb8\xba8001
        | sadp_modify_device_net_parameters | SerialNo | DS-2CD855F-E0120121018CCRR408735609 | 12345 | Port=8001 |
        """
        lpNetParam = SADP_DEV_NET_PARAM()
        memset(byref(lpNetParam), 0, sizeof(SADP_DEV_NET_PARAM))
        device_info = self.sadp_get_online_devices_info(condition, condition_value)
        if len(device_info) > 1:
            raise Exception('We have found more than 1 device match condition=%s, condition_value=%s' % (
            condition, condition_value))
        if len(device_info) <= 0:
            raise Exception('Can not find any devices by condition=%s, condition_value=%s, device maybe offline!' % (
            condition, condition_value))
        lpNetParam.szIPv4Address = device_info[0]['IP']
        lpNetParam.szIPv4SubNetMask = device_info[0]['SubNetMask']
        lpNetParam.szIPv4Gateway = device_info[0]['GateWay']
        lpNetParam.szIPv6Address = device_info[0]['IP6']
        lpNetParam.szIPv6Gateway = device_info[0]['IP6GateWay']
        lpNetParam.wPort = device_info[0]['Port']
        lpNetParam.byIPv6MaskLen = device_info[0]['IP6MaskLen']
        lpNetParam.byDhcpEnable = device_info[0]['DhcpEnable']
        lpNetParam.wHttpPort = device_info[0]['HttpPort']
        para_value_list = self._get_parameter_value_list(string_para_set, keyword_para_set)
        for parameter, value in para_value_list:
            if parameter == 'IP':
                lpNetParam.szIPv4Address = value
                continue
            if parameter == 'Port':
                lpNetParam.wPort = int(value)
                continue
            if parameter == 'SubNetMask':
                lpNetParam.szIPv4SubNetMask = value
                continue
            if parameter == 'GateWay':
                lpNetParam.szIPv4Gateway = value
                continue
            if parameter == 'IP6':
                lpNetParam.szIPv6Address = value
                continue
            if parameter == 'IP6GateWay':
                lpNetParam.szIPv6Gateway = value
                continue
            if parameter == 'HttpPort':
                lpNetParam.wHttpPort = int(value)
                continue
            if parameter == 'DhcpEnable':
                lpNetParam.byDhcpEnable = int(value)
                continue
            raise Exception('Not support parameter ' + parameter)

        ret = self._sadplib.SADP_ModifyDeviceNetParam(device_info[0]['MAC'], str(Password), byref(lpNetParam))
        if not ret:
            raise Exception('SADP lib: modify_device_net_parameters Failed with Error: ' + self._get_last_error_msg())
        return True

    def _sadp_get_online_devices_info(self, condition=None, condition_value=None, devices_info=None):
        '''
        \xe4\xbb\x8eSADP\xe6\x9f\xa5\xe6\x89\xbe\xe5\x9c\xa8\xe7\xba\xbf\xe8\xae\xbe\xe5\xa4\x87\xe8\xaf\xa6\xe7\xbb\x86\xe4\xbf\xa1\xe6\x81\xaf,\xe5\xbf\x85\xe9\x9c\x80\xe5\x85\x88\xe7\x94\xa8SADP start\xe6\x9d\xa5\xe5\x90\xaf\xe5\x8a\xa8SADP(\xe8\x8b\xa5\xe6\x9f\xa5\xe8\xaf\xa2\xe4\xb8\x8d\xe5\x88\xb0\xe8\xae\xbe\xe5\xa4\x87\xe5\x8f\xaf\xe5\xa4\x9asleep\xe5\x87\xa0\xe7\xa7\x92,\xe6\x88\x96\xe8\x80\x85\xe8\xb0\x83\xe7\x94\xa8sadp_send_inquiry\xe4\xbb\xa5\xe5\x8f\x8asadp_clearup\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe8\xa7\xa3\xe5\x86\xb3)
        \xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9a
            condition\xef\xbc\x9a\xe6\x9f\xa5\xe6\x89\xbe\xe6\x9d\xa1\xe4\xbb\xb6\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe4\xb8\xbaNone\xef\xbc\x8c\xe4\xb8\xbaNone\xe7\x9a\x84\xe6\x97\xb6\xe5\x80\x99condition_value\xe4\xb9\x9f\xe5\xbf\x85\xe9\xa1\xbb\xe4\xb8\xbaNone\xef\xbc\x8cNone\xe4\xbb\xa3\xe8\xa1\xa8\xe6\x9f\xa5\xe6\x89\xbe\xe5\x85\xa8\xe9\x83\xa8\xe5\x9c\xa8\xe7\xba\xbf\xe8\xae\xbe\xe5\xa4\x87\xe7\x9a\x84\xe8\xaf\xa6\xe7\xbb\x86\xe4\xbf\xa1\xe6\x81\xaf\xef\xbc\x8c
            \xe5\xbd\x93\xe6\x9f\xa5\xe8\xaf\xa2\xe6\x9d\xa1\xe4\xbb\xb6\xe4\xb8\xbaNone\xe6\x97\xb6\xef\xbc\x9a
        \xe8\xbf\x94\xe5\x9b\x9e\xe5\x80\xbc\xef\xbc\x9a
            \xe4\xb8\x80\xe4\xb8\xaa\xe4\xbb\xa5\xe8\xae\xbe\xe5\xa4\x87mac\xe4\xb8\xba\xe9\x94\xae\xef\xbc\x8c\xe4\xbb\xa5\xe8\xae\xbe\xe5\xa4\x87\xe4\xbf\xa1\xe6\x81\xaf\xe5\xad\x97\xe5\x85\xb8\xe4\xb8\xba\xe5\x80\xbc\xe7\x9a\x84\xe4\xb8\x80\xe4\xb8\xaa\xe5\xa4\xa7\xe5\xad\x97\xe5\x85\xb8\xef\xbc\x8c\xe5\xbd\xa2\xe5\xa6\x82\xef\xbc\x9a{MAC1:{\xe8\xae\xbe\xe5\xa4\x871\xe4\xbf\xa1\xe6\x81\xaf\xe5\xad\x97\xe5\x85\xb8}\xef\xbc\x8cMAC2:{\xe8\xae\xbe\xe5\xa4\x872\xe4\xbf\xa1\xe6\x81\xaf\xe5\xad\x97\xe5\x85\xb8},...}

            \xe5\xbd\x93\xe6\x9f\xa5\xe8\xaf\xa2\xe6\x9d\xa1\xe4\xbb\xb6\xe4\xb8\x8d\xe4\xb8\xbaNone\xe6\x97\xb6\xef\xbc\x9a
            \xe6\x94\xaf\xe6\x8c\x81\xe5\xa6\x82\xe4\xb8\x8b\xe6\x9f\xa5\xe6\x89\xbe\xe6\x9d\xa1\xe4\xbb\xb6\xef\xbc\x9a
                1. SubNetMask\xef\xbc\x9a\xe5\xad\x90\xe7\xbd\x91\xe6\x8e\xa9\xe7\xa0\x81
                2. MAC\xef\xbc\x9a\xe7\x89\xa9\xe7\x90\x86\xe5\x9c\xb0\xe5\x9d\x80
                3. GateWay\xef\xbc\x9a\xe7\xbd\x91\xe5\x85\xb3
                4. SerialNO\xef\xbc\x9a\xe8\xae\xbe\xe5\xa4\x87\xe5\xba\x8f\xe5\x88\x97\xe5\x8f\xb7
                5. IP: IP\xe5\x9c\xb0\xe5\x9d\x80
            condition_value\xef\xbc\x9a\xe6\x9f\xa5\xe6\x89\xbe\xe6\x9d\xa1\xe4\xbb\xb6condition\xe7\x9a\x84\xe5\x80\xbc
            devices_info\xef\xbc\x9a \xe8\xae\xbe\xe5\xa4\x87\xe4\xbf\xa1\xe6\x81\xaf\xe5\xad\x97\xe5\x85\xb8
        \xe8\xbf\x94\xe5\x9b\x9e\xe5\x80\xbc\xef\xbc\x9a
            \xe7\xac\xa6\xe5\x90\x88\xe6\x9d\xa1\xe4\xbb\xb6\xe7\x9a\x84\xe8\xae\xbe\xe5\xa4\x87\xe4\xbf\xa1\xe6\x81\xaf\xe5\x88\x97\xe8\xa1\xa8\xef\xbc\x8c\xe5\xbd\xa2\xe5\xa6\x82:[{\xe8\xae\xbe\xe5\xa4\x871\xe4\xbf\xa1\xe6\x81\xaf\xe5\xad\x97\xe5\x85\xb8},{\xe8\xae\xbe\xe5\xa4\x872\xe4\xbf\xa1\xe6\x81\xaf\xe5\xad\x97\xe5\x85\xb8},...]
            \xe5\x88\x97\xe8\xa1\xa8\xe5\x86\x85\xe5\xad\x97\xe5\x85\xb8\xe9\x94\xae\xe5\x80\xbc\xe5\x8c\x85\xe6\x8b\xac\xef\xbc\x9a
                IP:IPV4
                MAC\xef\xbc\x9a\xe7\x89\xa9\xe7\x90\x86\xe5\x9c\xb0\xe5\x9d\x80
                SubNetMask\xef\xbc\x9a\xe5\xad\x90\xe7\xbd\x91\xe6\x8e\xa9\xe7\xa0\x81
                GateWay\xef\xbc\x9a\xe7\xbd\x91\xe5\x85\xb3
                SerialNO\xef\xbc\x9a\xe8\xae\xbe\xe5\xa4\x87\xe5\xba\x8f\xe5\x88\x97\xe5\x8f\xb7
                BootTime\xef\xbc\x9a\xe8\xae\xbe\xe5\xa4\x87\xe5\x90\xaf\xe5\x8a\xa8\xe6\x97\xb6\xe9\x97\xb4
                Port:\xe7\xab\xaf\xe5\x8f\xa3\xe5\x8f\xb7
                SoftwareVersion\xef\xbc\x9a\xe8\xbd\xaf\xe4\xbb\xb6\xe7\x89\x88\xe6\x9c\xac
                DSPVersion:DSP\xe7\x89\x88\xe6\x9c\xac
                IP6\xef\xbc\x9aIPV6
                IP6GateWay\xef\xbc\x9aIPV6\xe7\xbd\x91\xe5\x85\xb3
                IP6MaskLen\xef\xbc\x9aIPv6\xe5\xad\x90\xe7\xbd\x91\xe5\x89\x8d\xe7\xbc\x80\xe9\x95\xbf\xe5\xba\xa6
                HttpPort\xef\xbc\x9aHttp \xe7\xab\xaf\xe5\x8f\xa3
                DhcpEnable\xef\xbc\x9aDhcp\xe7\x8a\xb6\xe6\x80\x81, 0 \xe4\xb8\x8d\xe5\x90\xaf\xe7\x94\xa8 1 \xe5\x90\xaf\xe7\x94\xa8
        \xe5\xa4\x87\xe6\xb3\xa8\xef\xbc\x9a
            | SADP start                     |
            | # 1.\xe6\x9f\xa5\xe6\x89\xbe\xe5\x85\xa8\xe9\x83\xa8\xe5\x9c\xa8\xe7\xba\xbf\xe7\x9a\x84\xe8\xae\xbe\xe5\xa4\x87\xe8\xaf\xa6\xe7\xbb\x86\xe4\xbf\xa1\xe6\x81\xaf        |
            | SADP Get Online Devices Info   |
            | # 2.\xe6\x9f\xa5\xe6\x89\xbe\xe5\xba\x8f\xe5\x88\x97\xe5\x8f\xb7\xe4\xb8\xbaDS-2CD4032FWD20130424CCCH417544771\xe7\x9a\x84\xe8\xae\xbe\xe5\xa4\x87\xe4\xbf\xa1\xe6\x81\xaf |
            | SADP Get Online Devices Info | SerialNO | DS-2CD4032FWD20130424CCCH417544771 | 3 |
            | # 3. \xe6\x9f\xa5\xe6\x89\xbeMAX\xe5\x9c\xb0\xe5\x9d\x80\xe4\xb8\xba44-19-b7-1f-e4-4d\xe7\x9a\x84\xe8\xae\xbe\xe5\xa4\x87\xe4\xbf\xa1\xe6\x81\xaf |
            | SADP Get Online Devices Info | MAC | 44-19-b7-1f-e4-4d | 3 |
            | # \xe5\x81\x9c\xe6\xad\xa2SADP |
            | SADP stop |
        '''
        if type(condition) is unicode:
            condition = condition.encode()
        if type(condition_value) is unicode:
            condition_value = condition_value.encode()
        if condition and condition_value:
            devices_list = []
            for key in devices_info:
                if condition.strip().lower() == 'ip' and devices_info[key]['IP'] == condition_value:
                    devices_list.append(devices_info[key])
                    print 'ip info'
                    continue
                if condition.strip().lower() == 'gateway' and devices_info[key]['GateWay'] == condition_value:
                    devices_list.append(devices_info[key])
                    print 'gateway info'
                    continue
                if condition.strip().lower() == 'mac' and devices_info[key]['MAC'] == condition_value:
                    devices_list.append(devices_info[key])
                    print 'mac info'
                    continue
                if condition.strip().lower() == 'serialno' and devices_info[key]['SerialNO'] == condition_value:
                    devices_list.append(devices_info[key])
                    # print 'serialno info'
                    continue
                if condition.strip().lower() == 'subnetmask' and devices_info[key]['SubNetMask'] == condition_value:
                    devices_list.append(devices_info[key])
                    print 'subnetmask info'
                    continue
            return devices_list
        if not None and not condition_value:
            return devices_info
        raise None('condition and condition_value must be (or not be) assignment at the same time.')

    def _sadp_send_inquiry(self):
        '''
        \xe6\x89\x8b\xe5\x8a\xa8\xe5\x88\xb7\xe6\x96\xb0\xe6\x90\x9c\xe7\xb4\xa2.
        \xe9\xbb\x98\xe8\xae\xa415s\xe8\x87\xaa\xe5\x8a\xa8\xe5\x88\xb7\xe6\x96\xb0\xe6\x90\x9c\xe7\xb4\xa2\xe5\x9c\xa8\xe7\xba\xbf\xe8\xae\xbe\xe5\xa4\x87\xef\xbc\x8c\xe8\xb0\x83\xe7\x94\xa8\xe8\xaf\xa5\xe6\x8e\xa5\xe5\x8f\xa3\xe5\x8f\xaf\xe4\xbb\xa5\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x89\x8b\xe5\x8a\xa8\xe5\x88\xb7\xe6\x96\xb0\xe3\x80\x82
        '''
        if self._sadplib.SADP_SendInquiry():
            return True
        raise None('SADP lib: SendInquiry Failed with Error: ' + self._get_last_error_msg())

    def _sadp_clearup(self):
        '''
        \xe6\xb8\x85\xe7\x90\x86\xe6\x90\x9c\xe7\xb4\xa2\xe5\x88\xb0\xe7\x9a\x84\xe8\xae\xbe\xe5\xa4\x87\xef\xbc\x8c\xe4\xb8\xba\xe4\xba\x86\xe5\x8f\x8a\xe6\x97\xb6\xe7\x9a\x84\xe6\x9b\xb4\xe6\x96\xb0\xe4\xb8\x8a\xe4\xb8\x8b\xe7\xba\xbf\xe8\xae\xbe\xe5\xa4\x87\xef\xbc\x8c\xe9\x98\xb2\xe6\xad\xa2\xe4\xb8\x8b\xe7\xba\xbf\xe9\x9c\x80\xe8\xa6\x81\xe7\xad\x89\xe5\xbe\x8530s\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5
        '''
        if self._sadplib.SADP_Clearup():
            return True
        raise None('SADP lib: SADP_Clearup Failed with Error: ' + self._get_last_error_msg())

    def _sadp_save_log(self, Log_Level, Target_DIR, AutoDelete):
        '''
        \xe5\x90\xaf\xe7\x94\xa8\xe5\x86\x99\xe6\x97\xa5\xe5\xbf\x97\xe6\x96\x87\xe4\xbb\xb6
        \xe5\x8f\x82  \xe6\x95\xb0\xef\xbc\x9a
            LogLevel\xef\xbc\x9a\xe6\x97\xa5\xe5\xbf\x97\xe7\x9a\x84\xe7\xad\x89\xe7\xba\xa7\xef\xbc\x88\xe9\xbb\x98\xe8\xae\xa4\xe4\xb8\xbaCloseLog\xef\xbc\x89\xef\xbc\x9a
                        CloseLog:\xe8\xa1\xa8\xe7\xa4\xba\xe5\x85\xb3\xe9\x97\xad\xe6\x97\xa5\xe5\xbf\x97\xef\xbc\x8c
                        Error:\xe8\xa1\xa8\xe7\xa4\xba\xe5\x8f\xaa\xe8\xbe\x93\xe5\x87\xbaERROR\xe9\x94\x99\xe8\xaf\xaf\xe6\x97\xa5\xe5\xbf\x97\xef\xbc\x8c
                        ErrorDebug:\xe8\xbe\x93\xe5\x87\xbaERROR\xe9\x94\x99\xe8\xaf\xaf\xe4\xbf\xa1\xe6\x81\xaf\xe5\x92\x8cDEBUG\xe8\xb0\x83\xe8\xaf\x95\xe4\xbf\xa1\xe6\x81\xaf\xef\xbc\x8c
                        ErrorDebugInfo:\xe8\xbe\x93\xe5\x87\xbaERROR\xe9\x94\x99\xe8\xaf\xaf\xe4\xbf\xa1\xe6\x81\xaf\xe3\x80\x81DEBUG\xe8\xb0\x83\xe8\xaf\x95\xe4\xbf\xa1\xe6\x81\xaf\xe5\x92\x8cINFO\xe6\x99\xae\xe9\x80\x9a\xe4\xbf\xa1\xe6\x81\xaf\xe7\xad\x89\xe6\x89\x80\xe6\x9c\x89\xe4\xbf\xa1\xe6\x81\xaf
            Target_DIR\xef\xbc\x9a\xe7\x9b\xae\xe5\xbd\x95\xe8\xb7\xaf\xe5\xbe\x84\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2, \xe5\xb0\x8f\xe4\xba\x8e256\xe4\xb8\xaa\xe5\xad\x97\xe7\xac\xa6\xe3\x80\x82\xe4\xb8\xbaNULL\xe6\x97\xb6\xef\xbc\x8cWindows\xe9\xbb\x98\xe8\xae\xa4\xe8\xb7\xaf\xe5\xbe\x84"C:/SadpLog/"
            AutoDelete\xef\xbc\x9a\xe6\x98\xaf\xe5\x90\xa6\xe5\x88\xa0\xe9\x99\xa4\xe8\xb6\x85\xe5\x87\xba\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe5\x80\xbc\xe4\xb8\xbaTrue
        '''
        LogLevelMap = {
            'CloseLog': 0,
            'Error': 1,
            'ErrorDebug': 2,
            'ErrorDebugInfo': 3}
        AutoDel = {
            'True': True,
            'False': False,
            True: True,
            False: False}
        save_log_operation = self._sadplib.SADP_SetLogToFile(LogLevelMap[Log_Level], Target_DIR, AutoDel[AutoDelete])
        if save_log_operation:
            return True
        raise None('Save Log Failed with Error: ' + self._get_last_error_msg())

    def _sadp_set_cms_info(self, sMAC, sPassword, lpNetParam):
        '''
        \xe8\xae\xbe\xe7\xbd\xae\xe8\xae\xbe\xe5\xa4\x87\xe7\x9a\x84CMS\xe4\xbf\xa1\xe6\x81\xaf\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe8\xae\xbe\xe5\xa4\x87\xe6\x94\xaf\xe6\x8c\x81\xef\xbc\x8c\xe5\xbd\x93\xe5\x89\x8d\xe4\xbb\x85\xe6\x8e\xa8\xe6\xa8\xa1\xe5\xbc\x8f\xe8\xae\xbe\xe5\xa4\x87\xef\xbc\x88\xe5\xa6\x82\xe5\x8d\x95\xe5\x85\xb5\xe3\x80\x81\xe8\xbd\xa6\xe8\xbd\xbd\xef\xbc\x89\xe6\x94\xaf\xe6\x8c\x81\xe3\x80\x82
        SADP_SetCMSInfo
        \xe5\x87\xbd  \xe6\x95\xb0\xef\xbc\x9a   int SADP_SetCMSInfo(const char* sMac, const SADP_CMS_PARAM *lpCmsParam)
        \xe5\x8f\x82  \xe6\x95\xb0\xef\xbc\x9a   [in] sMac
        [in] lpCmsParam \xe8\xae\xbe\xe5\xa4\x87\xe7\x89\xa9\xe7\x90\x86\xe5\x9c\xb0\xe5\x9d\x80
        \xe9\x9c\x80\xe8\xa6\x81\xe8\xae\xbe\xe7\xbd\xae\xe7\x9a\x84CMS\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\xe8\xaf\xa6\xe8\xa7\x81\xef\xbc\x9aSADP_CMS_PARAM
        \xe8\xbf\x94\xe5\x9b\x9e\xe5\x80\xbc\xef\xbc\x9a    1\xe8\xa1\xa8\xe7\xa4\xba\xe6\x88\x90\xe5\x8a\x9f\xef\xbc\x8c0\xe8\xa1\xa8\xe7\xa4\xba\xe5\xa4\xb1\xe8\xb4\xa5\xe3\x80\x82\xe5\x87\xbd\xe6\x95\xb0\xe8\xbf\x94\xe5\x9b\x9e\xe5\xa4\xb1\xe8\xb4\xa5\xe8\xaf\xb7\xe8\xb0\x83\xe7\x94\xa8\xe6\x8e\xa5\xe5\x8f\xa3SADP_GetLastError\xe8\x8e\xb7\xe5\x8f\x96\xe9\x94\x99\xe8\xaf\xaf\xe7\xa0\x81\xe3\x80\x82
        '''
        if self._sadplib.SADP_SetCMSInfo(sMAC, lpNetParam):
            return True
        raise None('SADP lib: sadp_set_cms_info Failed with Error: ' + self._get_last_error_msg())

    def _get_last_error_msg(self):
        '''
        \xe8\x8e\xb7\xe5\x8f\x96\xe9\x94\x99\xe8\xaf\xaf\xe6\xb6\x88\xe6\x81\xaf
        \xe6\x8a\x8aError Code\xe4\xbd\x9c\xe4\xb8\xbakey\xef\xbc\x8c\xe4\xbb\x8eerror code msg mapping\xe5\xbe\x97\xe5\x88\xb0 \xe6\xb6\x88\xe6\x81\xaf\xe5\x86\x85\xe5\xae\xb9
        '''
        return error_code_msg_mapping[self._sadplib.SADP_GetLastError()]

    def _get_parameter_value_list(self, string_para_set, keyword_para_set):
        '''
        \xe4\xbb\x8e\xe5\x9f\xba\xe6\x9c\xac\xe6\xa0\xbc\xe5\xbc\x8f\xe4\xb8\xba\xe2\x80\x9d\xe5\x8f\x82\xe6\x95\xb0\xe5\x90\x8d=\xe5\x8f\x82\xe6\x95\xb0\xe5\x80\xbc"\xe7\x9a\x84\xe5\x8f\xaf\xe5\x8f\x98\xe5\x8f\x82\xe6\x95\xb0\xe5\x85\x83\xe7\xbb\x84\xe3\x80\x81\xe5\xad\x97\xe5\x85\xb8\xe4\xb8\xad\xe8\x8e\xb7\xe5\x8f\x96 \xef\xbc\x88\xe5\x8f\x82\xe6\x95\xb0\xe5\x90\x8d\xef\xbc\x8c\xe5\x8f\x82\xe6\x95\xb0\xe5\x80\xbc\xef\xbc\x89\xe7\x9a\x84\xe5\x88\x97\xe8\xa1\xa8\xe5\xb9\xb6\xe8\xbf\x94\xe5\x9b\x9e
        \xe5\x8f\x82\xe6\x95\xb0:
            string_para_set: \xe4\xbb\xa5\'\xe5\x8f\x82\xe6\x95\xb0=\xe5\x80\xbc\'\xe7\x9a\x84\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xef\xbc\x880\xe4\xb8\xaa\xe6\x88\x96\xe5\xa4\x9a\xe4\xb8\xaa\xef\xbc\x89\xe4\xbc\xa0\xe9\x80\x92\xe7\x9a\x84\xe5\x8f\xaf\xe5\x8f\x98\xe5\x8f\x82\xe6\x95\xb0\xe7\x9a\x84\xe5\x85\x83\xe7\xbb\x84\xef\xbc\x8c\xe4\xb8\x80\xe8\x88\xac\xe4\xb8\xba\xe5\x9c\xa8function(*pargs)\xe5\x87\xbd\xe6\x95\xb0\xe5\x86\x85\xe9\x83\xa8\xe5\x8c\xb9\xe9\x85\x8d\xe5\xb9\xb6\xe6\x94\xb6\xe9\x9b\x86\xe7\x9a\x84pargs\xe5\x85\x83\xe7\xbb\x84
            keyword_para_set: \xe4\xbb\xa5\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe5\x8f\x82\xe6\x95\xb0(0\xe4\xb8\xaa\xe6\x88\x96\xe5\xa4\x9a\xe4\xb8\xaa\xef\xbc\x89\xe4\xbc\xa0\xe9\x80\x92\xe7\x9a\x84\xe5\x8f\xaf\xe5\x8f\x98\xe5\x8f\x82\xe6\x95\xb0\xe7\x9a\x84\xe5\xad\x97\xe5\x85\xb8\xef\xbc\x8c\xe4\xb8\x80\xe8\x88\xac\xe4\xb8\xba\xe5\x9c\xa8function(**kargs)\xe5\x87\xbd\xe6\x95\xb0\xe5\x86\x85\xe9\x83\xa8\xe5\x8c\xb9\xe9\x85\x8d\xe5\xb9\xb6\xe6\x94\xb6\xe9\x9b\x86\xe7\x9a\x84kargs\xe5\xad\x97\xe5\x85\xb8
        '''
        err_string_para = ['%s' % string for string in string_para_set if string.count('=') != 1]
        if err_string_para:
            message = "Parameters format error: %s, you should seperate parameter from value with one '='." % ', '.join(
                err_string_para)
            raise Exception(message)
        string_para = [tuple([item.strip() for item in string.split('=')]) for string in string_para_set]
        keyword_para = [(para, str(val)) for para, val in keyword_para_set.items()]
        para_value_list = string_para + keyword_para
        return para_value_list

    def sadp_activate_device_by_serial_no(self, serial_no='', password=''):
        '''
        \xe9\x80\x9a\xe8\xbf\x87\xe5\xba\x8f\xe5\x88\x97\xe5\x8f\xb7\xe6\xbf\x80\xe6\xb4\xbb\xe8\xae\xbe\xe5\xa4\x87
        \xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9a
            serial_no: \xe5\xba\x8f\xe5\x88\x97\xe5\x8f\xb7
            password: \xe8\xa6\x81\xe8\xae\xbe\xe7\xbd\xae\xe7\x9a\x84\xe5\xaf\x86\xe7\xa0\x81\xef\xbc\x8c\xe5\xaf\x86\xe7\xa0\x81\xe7\xad\x89\xe7\xba\xa7\xe5\xbc\xb1\xe6\x88\x96\xe8\x80\x85\xe4\xbb\xa5\xe4\xb8\x8a
                \xe5\x87\xba\xe5\x8e\x82\xe8\xae\xbe\xe5\xa4\x87\xe9\x9c\x80\xe8\xa6\x81\xe5\x85\x88\xe6\xbf\x80\xe6\xb4\xbb\xef\xbc\x8c\xe7\x84\xb6\xe5\x90\x8e\xe5\x86\x8d\xe4\xbd\xbf\xe7\x94\xa8\xe6\xbf\x80\xe6\xb4\xbb\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe5\x88\x9d\xe5\xa7\x8b\xe5\xaf\x86\xe7\xa0\x81\xe8\xae\xbf\xe9\x97\xae\xe8\xae\xbe\xe5\xa4\x87\xe3\x80\x82\xe5\xb0\x86\xe5\xaf\x86\xe7\xa0\x81\xe8\xbe\x93\xe5\x85\xa5\xe5\x88\x86\xe4\xb8\xba\xe6\x95\xb0\xe5\xad\x97(0~9)\xe3\x80\x81\xe5\xb0\x8f\xe5\x86\x99\xe5\xad\x97\xe6\xaf\x8d(a~z)\xe3\x80\x81\xe5\xa4\xa7\xe5\x86\x99\xe5\xad\x97\xe6\xaf\x8d(A~Z)\xe3\x80\x81\xe7\x89\xb9\xe6\xae\x8a\xe7\xac\xa6\xe5\x8f\xb7\xef\xbc\x88:"\xe9\x99\xa4\xe5\xa4\x96\xef\xbc\x894\xe7\xb1\xbb\xef\xbc\x8c\xe7\xad\x89\xe7\xba\xa7\xe5\x88\x86\xe4\xb8\xba4\xe4\xb8\xaa\xe7\xad\x89\xe7\xba\xa7\xef\xbc\x8c\xe5\xa6\x82\xe4\xb8\x8b\xe6\x89\x80\xe7\xa4\xba\xef\xbc\x9a
                \xe7\xad\x89\xe7\xba\xa70\xef\xbc\x88\xe9\xa3\x8e\xe9\x99\xa9\xe5\xaf\x86\xe7\xa0\x81\xef\xbc\x89\xef\xbc\x9a\xe5\xaf\x86\xe7\xa0\x81\xe9\x95\xbf\xe5\xba\xa6\xe5\xb0\x8f\xe4\xba\x8e8\xe4\xbd\x8d\xef\xbc\x8c\xe6\x88\x96\xe8\x80\x85\xe5\x8f\xaa\xe5\x8c\x85\xe5\x90\xab4\xe7\xb1\xbb\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xad\xe7\x9a\x84\xe4\xbb\xbb\xe6\x84\x8f\xe4\xb8\x80\xe7\xb1\xbb\xef\xbc\x8c\xe6\x88\x96\xe8\x80\x85\xe5\xaf\x86\xe7\xa0\x81\xe4\xb8\x8e\xe7\x94\xa8\xe6\x88\xb7\xe5\x90\x8d\xe4\xb8\x80\xe6\xa0\xb7\xef\xbc\x8c\xe6\x88\x96\xe8\x80\x85\xe5\xaf\x86\xe7\xa0\x81\xe6\x98\xaf\xe7\x94\xa8\xe6\x88\xb7\xe5\x90\x8d\xe7\x9a\x84\xe5\x80\x92\xe5\x86\x99\xe3\x80\x82\xe4\xbe\x8b\xe5\xa6\x82\xef\xbc\x9a12345\xe3\x80\x81abcdef\xe3\x80\x82
                \xe7\xad\x89\xe7\xba\xa71\xef\xbc\x88\xe5\xbc\xb1\xe5\xaf\x86\xe7\xa0\x81\xef\xbc\x89\xef\xbc\x9a\xe5\x8c\x85\xe5\x90\xab\xe4\xb8\xa4\xe7\xb1\xbb\xe5\xad\x97\xe7\xac\xa6\xef\xbc\x8c\xe4\xb8\x94\xe7\xbb\x84\xe5\x90\x88\xe4\xb8\xba\xef\xbc\x88\xe6\x95\xb0\xe5\xad\x97+\xe5\xb0\x8f\xe5\x86\x99\xe5\xad\x97\xe6\xaf\x8d\xef\xbc\x89\xe6\x88\x96\xef\xbc\x88\xe6\x95\xb0\xe5\xad\x97+\xe5\xa4\xa7\xe5\x86\x99\xe5\xad\x97\xe6\xaf\x8d\xef\xbc\x89\xef\xbc\x8c\xe4\xb8\x94\xe9\x95\xbf\xe5\xba\xa6\xe5\xa4\xa7\xe4\xba\x8e\xe7\xad\x89\xe4\xba\x8e8\xe4\xbd\x8d\xe3\x80\x82\xe4\xbe\x8b\xe5\xa6\x82\xef\xbc\x9aabc12345\xe3\x80\x81123ABCDEF\xe3\x80\x82
                \xe7\xad\x89\xe7\xba\xa72\xef\xbc\x88\xe4\xb8\xad\xe5\xaf\x86\xe7\xa0\x81\xef\xbc\x89\xef\xbc\x9a\xe5\x8c\x85\xe5\x90\xab\xe4\xb8\xa4\xe7\xb1\xbb\xe5\xad\x97\xe7\xac\xa6\xef\xbc\x8c\xe4\xb8\x94\xe7\xbb\x84\xe5\x90\x88\xe4\xb8\x8d\xe8\x83\xbd\xe4\xb8\xba\xef\xbc\x88\xe6\x95\xb0\xe5\xad\x97+\xe5\xb0\x8f\xe5\x86\x99\xe5\xad\x97\xe6\xaf\x8d\xef\xbc\x89\xe5\x92\x8c\xef\xbc\x88\xe6\x95\xb0\xe5\xad\x97+\xe5\xa4\xa7\xe5\x86\x99\xe5\xad\x97\xe6\xaf\x8d\xef\xbc\x89\xef\xbc\x8c\xe4\xb8\x94\xe9\x95\xbf\xe5\xba\xa6\xe5\xa4\xa7\xe4\xba\x8e\xe7\xad\x89\xe4\xba\x8e8\xe4\xbd\x8d\xe3\x80\x82\xe4\xbe\x8b\xe5\xa6\x82\xef\xbc\x9a12345***++\xe3\x80\x81ABCDabcd\xe3\x80\x82
                \xe7\xad\x89\xe7\xba\xa73\xef\xbc\x88\xe5\xbc\xba\xe5\xaf\x86\xe7\xa0\x81\xef\xbc\x89\xef\xbc\x9a\xe5\x8c\x85\xe5\x90\xab\xe4\xb8\x89\xe7\xb1\xbb\xe5\xad\x97\xe7\xac\xa6\xe5\x8f\x8a\xe4\xbb\xa5\xe4\xb8\x8a\xef\xbc\x8c\xe4\xb8\x94\xe9\x95\xbf\xe5\xba\xa6\xe5\xa4\xa7\xe4\xba\x8e\xe7\xad\x89\xe4\xba\x8e8\xe4\xbd\x8d\xe3\x80\x82\xe4\xbe\x8b\xe5\xa6\x82\xef\xbc\x9aAbc12345\xe3\x80\x81abc12345++\xe3\x80\x82
        \xe8\xbf\x94\xe5\x9b\x9e\xe5\x80\xbc\xef\xbc\x9a
            \xe6\xbf\x80\xe6\xb4\xbb\xe6\x88\x90\xe5\x8a\x9f\xe8\xbf\x94\xe5\x9b\x9eTrue\xef\xbc\x8c\xe5\xa4\xb1\xe8\xb4\xa5\xe5\x88\x99\xe6\x8a\x9b\xe5\x87\xba\xe5\xbc\x82\xe5\xb8\xb8\xe4\xbf\xa1\xe6\x81\xaf
        \xe5\xa4\x87\xe6\xb3\xa8:
            \xe9\x9c\x80\xe8\xa6\x81\xe5\x85\x88\xe8\xb0\x83\xe7\x94\xa8Sadp Start\xe5\xbc\x80\xe5\x90\xafSADP
        SDK\xe4\xbf\xa1\xe6\x81\xaf\xef\xbc\x9a
            \xe6\x8e\xa5\xe5\x8f\xa3\xef\xbc\x9aSADP_ActivateDevice
        \xe4\xbd\x9c\xe8\x80\x85\xef\xbc\x9aliangyuke
        '''
        if type(serial_no) is unicode:
            serial_no = serial_no.encode()
        if type(password) is unicode:
            password = password.encode()
        device_info = self.sadp_get_online_devices_info('SerialNO', serial_no, 1)
        if len(device_info) > 1:
            ret = u'序列号{0}：激活失败，存在多个同名序列号的设备'.format(serial_no)
            return ret,False
        if len(device_info) <= 0:
            ret = u'序列号{0}：激活失败，查询不到该序列号的设备信息'.format(serial_no)
            return ret,False
        return_code = self._sadplib.SADP_ActivateDevice(str(serial_no), str(password))
        if return_code == 1:
            ret = 'True'
            return ret, True
        else:
            ret = u'序列号{0}：激活失败，sadp_activate_device Failed with Error {1}'.format(serial_no,self._get_last_error_msg())
            return ret,False


    def reload_sadp(self):
        '''
        \xe9\x87\x8d\xe6\x96\xb0\xe5\x8a\xa0\xe8\xbd\xbdSADP\xe5\xba\x93
        '''
        self._sadplib.SADP_Stop()
        self._sadplib = get_sadplib()


